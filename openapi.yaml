openapi: 3.0.0
info:
  title: Brightcove OTT API
  description: 'Reference for the Brightcove OTT API - Test example'
  version: 1.0.0
servers:
  - url: 'localhost:3000'
tags:
  - name: Movies
    description: Movies related endpoints
paths:
  '/v1/ott/{account_id}/movies':
    get:
      parameters:
        - $ref: '#/components/parameters/AccountId'
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
      tags:
        - Movies
      summary: SHOULD BE ABLE TO GET THE LIST OF MOVIES FOR THIS ACCOUNT ID
      operationId: GetAllOTTMovies
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoviesList'
    post:
      parameters:
        - $ref: '#/components/parameters/AccountId'
        - $ref: '#/components/parameters/ContentType'
      tags:
        - Movies
      summary: SHOULD BE ABLE TO CREATE ONE MOVIE FOR THIS ACCOUNT ID
      operationId: CreateOTTMovie
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'Success'
                  message:
                    type: string
                    example: 'Movie created successfully'
                  data:
                    $ref: '#/components/schemas/Movie'
  '/v1/ott/{account_id}/movies/{movie_id}':
    parameters:
      - $ref: '#/components/parameters/AccountId'
      - $ref: '#/components/parameters/ContentType'
      - $ref: '#/components/parameters/MovieId'
    get:
      tags:
        - Movies
      summary: SHOULD BE ABLE TO GET ONE MOVIE FOR THIS ACCOUNT ID BY MOVIE ID
      operationId: GetOTTMovie
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type:
                      object
                    properties:
                      data:
                        $ref: '#/components/schemas/Movie'
    put:
      tags:
        - Movies
      summary: SHOULD BE ABLE TO UPDATE ONE MOVIE FOR THIS ACCOUNT ID BY MOVIE ID
      operationId: UpdateMovie
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieUpdate'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                        example: 'success'
                      message:
                        type: string
                        example:
                          'Movie updated successfully'
                      data:
                        $ref: '#/components/schemas/Movie'
        '404':
          description: 'Movie not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Movie {movie_id} not found"
    delete:
      tags:
        - Movies
      summary: SHOULD BE ABLE TO DELETE ONE MOVIE FOR THIS ACCOUNT ID BY MOVIE ID
      operationId: DeleteMovie
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Movie deleted'
components:
  parameters:
    AccountId:
      name: account_id
      in: path
      description: account ID (Should be defined by you).
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ContentType:
      name: Content-Type
      in: header
      description: 'Content-Type: application/json'
      required: true
      style: simple
      explode: false
      schema:
        type: string
        default: application/json
      example: application/json
    MovieId:
      name: movie_id
      in: path
      description: Movie ID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: "The requested maximum number of collection items to return for a single request."
      required: false
      schema:
        type: integer
        format: int32
        default: 50
    page:
      name: page
      in: query
      description: 'Page number of the elements to be requested from server. one-indexed'
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    published:
      name: published
      in: query
      description: "The published filter to be applied to the assets returned."
      required: false
      schema:
        type: boolean
  schemas:
    Pagination:
      type: object
      properties:
        per_page:
          type: integer
          description: "Number of items per page"
          example: 50
          default: 50
        first_page:
          type: integer
          description: "First page URL"
          example: 1
        prev_page:
          type: integer
          description: "Previous page URL"
          example: 2
        current_page:
          type: integer
          description: "Current page number"
          example: 3
          default: 1
        next_page:
          type: integer
          description: "Next page URL"
          example: 4
        last_page:
          type: integer
          description: "Last page"
          example: 5
        total_items:
          type: integer
          description: "Total of assets"
          example: 250
    MoviesList:
      allOf:
        - $ref: '#/components/schemas/Pagination'
        - type: object
          properties:
            items:
              type: array
              items:
                type: object
              example:
                - id: 1
                  published: 1
                  original_title: 'Avengers Endgame'
                  created_at: "2020-07-08T16:31:49.000Z"
                  updated_at: "2020-07-08T16:31:49.000Z"
                  poster: "localhost:3000/movies/1.jpg"
                - id: 2
                  published: 0
                  original_title: 'Avengers Endgame 2'
                  created_at: "2020-07-08T16:31:49.000Z"
                  updated_at: "2020-07-08T16:31:49.000Z"
                  poster: "localhost:3000/movies/2.jpg"
    Movie:
      allOf:
        - $ref: '#/components/schemas/Asset'
        - type: object
          properties:
            original_title:
              type: string
              example: 'Avengers Endgame'
            production_year:
              type: string
              example: 2020
            video_id:
              type: string
              example: '1680608156245230581'
            created_at:
              type: string
              format: date-time
              example: "2020-07-08T16:31:49.000Z"
            updated_at:
              type: string
              format: date-time
              example: "2020-07-08T16:31:49.000Z"
            poster:
              example: "localhost:3000/movies/1.jpg"
    MovieUpdate:
      allOf:
        - $ref: '#/components/schemas/AssetUpdate'
        - type: object
          properties:
            original_title:
              type: string
              example: 'Avengers Endgame'
            production_year:
              type: string
              example: 2020
            video_id:
              type: string
              example: '1680608156245230581'
            created_at:
              type: string
              format: date-time
              example: "2020-07-08T16:31:49.000Z"
            updated_at:
              type: string
              format: date-time
              example: "2020-07-08T16:31:49.000Z"
            poster:
              example: "localhost:3000/movies/1.jpg"
    Asset:
      type: object
      properties:
        id:
          type: integer
          example: 1
        published:
          type: integer
          example: 1
          description: 'Publication status of the asset, 1 = published, 0 = not published'
        production_country:
          type: array
          items:
            $ref: '#/components/schemas/ListOfNames'
        cast:
          type: object
          properties:
            actors:
              $ref: '#/components/schemas/ListOfNames'
            directors:
              $ref: '#/components/schemas/ListOfNames'
    AssetUpdate:
      type: object
      properties:
        published:
          type: integer
          example: 1
          description: 'Publication status of the asset, 1 = published, 0 = not published'
        production_country:
          type: array
          items:
            $ref: '#/components/schemas/ListOfNames'
        cast:
          type: object
          properties:
            actors:
              $ref: '#/components/schemas/ListOfNames'
            directors:
              $ref: '#/components/schemas/ListOfNames'
    ListOfNames:
      type: object
      properties:
        name:
          type: string
